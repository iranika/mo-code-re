{"version":3,"sources":["AppBar.tsx","Viewer.tsx","WeLoveMichikusaya.tsx","Donate.tsx","Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","flexGrow","appbar","background","menuButton","marginRight","spacing","title","textAlign","options","MangaList","koma4","map","item","index","ListItem","button","Title","ButtonAppBar","classes","React","useState","langMenuAncor","setLangMenuAncor","selectedIndex","setSelectedIndex","useContext","AppContext","right","titleSidebarAncor","settitleSidebarAncor","toggleDrawer","side","open","event","type","key","className","AppBar","position","Toolbar","Typography","variant","List","component","aria-label","aria-haspopup","aria-controls","onClick","e","currentTarget","ListItemText","primary","Menu","id","anchorEl","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","Boolean","onClose","option","MenuItem","disabled","selected","handleLangMenuItemClick","IconButton","edge","color","SwipeableDrawer","anchor","onOpen","Divider","ViewerContents","state","showlist","current","handleAddShowList","setState","concat","console","log","this","ImagesUrl","url","src","alt","style","width","value","Component","weLoveText","fontSize","fontWeight","guysIcon","borderRadius","WeLoveMichikusaya","LikedGuys","guys","icon","name","heading","typography","pxToRem","flexBasis","flexShrink","secondaryHeading","palette","text","secondary","Donate","ancor","setAncor","Card","Button","Collapse","in","marginBottom","Footer","Container","fixed","defaultAppContext","lang","createContext","App","Provider","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.22f69a56.chunk.js","sourcesContent":["import React from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport koma4 from './data/koma4.json';\r\nimport {AppContext} from './App'\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n//import Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport useScrollTrigger from '@material-ui/core/useScrollTrigger';\r\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    appbar:{\r\n      background : '#00cc00',\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      textAlign: \"left\",\r\n      flexGrow: 1,\r\n    },\r\n  }),\r\n);\r\n\r\n//TODO: optionsは親要素で管理する\r\nconst options = [\r\n  'Japanese',\r\n  'English',\r\n  'Chinese',\r\n];\r\nconst MangaList = koma4.map((item, index) =>\r\n  //TODO: アイテムがクリックされたときの実装して\r\n  <ListItem button >{index+1}.{item.Title}</ListItem>\r\n);\r\n\r\n//TODO: 肥大化しやすいのでどこかのタイミングで分割、リファクタリングする。\r\nexport default function ButtonAppBar() {\r\n  const title = \"みちくさびゅあー\"\r\n  const classes = useStyles();\r\n  const [langMenuAncor, setLangMenuAncor] = React.useState<null | HTMLElement>(null);\r\n  const [selectedIndex, setSelectedIndex] = React.useState(0);\r\n  const lang = React.useContext(AppContext)\r\n  //console.log(lang)\r\n\r\n  //言語メニューの処理\r\n  const handleClose = () => {\r\n    //TODO: 引数で選択できるようにする(優先度低)\r\n    setLangMenuAncor(null);\r\n  };\r\n  const handleClickAncor = (event: React.MouseEvent<HTMLElement>, setAncor: React.Dispatch<React.SetStateAction<HTMLElement | null>>) => {\r\n      setAncor(event.currentTarget);\r\n  };\r\n  const handleLangMenuItemClick = (event: React.MouseEvent<HTMLElement>, index: number) => {\r\n    setSelectedIndex(index);\r\n    setLangMenuAncor(null);\r\n  };\r\n\r\n  //タイトルサイドバーの処理\r\n  const [titleSidebarAncor, settitleSidebarAncor] = React.useState({\r\n    right: false,\r\n  });\r\n  type DrawerSide = 'top' | 'left' | 'bottom' | 'right';\r\n  const toggleDrawer = (side: DrawerSide, open: boolean) => (\r\n    event: React.KeyboardEvent | React.MouseEvent,\r\n  ) => {\r\n    if (\r\n      event &&\r\n      event.type === 'keydown' &&\r\n      ((event as React.KeyboardEvent).key === 'Tab' ||\r\n        (event as React.KeyboardEvent).key === 'Shift')\r\n    ) {\r\n      return;\r\n    }\r\n    settitleSidebarAncor({ ...titleSidebarAncor, [side]: open });\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"fixed\" className={classes.appbar}>\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            {title}\r\n          </Typography>\r\n          <List component=\"nav\" aria-label=\"Device settings\">\r\n            <ListItem\r\n              button\r\n              aria-haspopup=\"true\"\r\n              aria-controls=\"lock-menu\"\r\n              aria-label=\"LANG\"\r\n              onClick={ (e)=>{ handleClickAncor(e,setLangMenuAncor) }}\r\n            >\r\n              <ListItemText primary={options[selectedIndex]} />\r\n            </ListItem>\r\n          </List>\r\n          <Menu\r\n            id=\"lock-menu\"\r\n            anchorEl={langMenuAncor}\r\n            anchorOrigin={{\r\n              vertical: 'top',\r\n              horizontal: 'right',\r\n            }}\r\n            keepMounted\r\n            transformOrigin={{\r\n              vertical: 'top',\r\n              horizontal: 'right',\r\n            }}\r\n            open={Boolean(langMenuAncor)}\r\n            onClose={handleClose}\r\n          >\r\n            {options.map((option, index) => (\r\n              <MenuItem\r\n                key={option}\r\n                disabled={index === selectedIndex}\r\n                selected={index === selectedIndex}\r\n                onClick={event => handleLangMenuItemClick(event, index)}\r\n              >\r\n                {option}\r\n              </MenuItem>\r\n            ))}\r\n          </Menu>\r\n        \r\n\r\n          <IconButton　edge=\"start\"\r\n            className={classes.menuButton}\r\n            color=\"inherit\"\r\n            aria-label=\"title-list\"\r\n            onClick={toggleDrawer('right', true)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <SwipeableDrawer\r\n            anchor=\"right\"\r\n            open={titleSidebarAncor.right}\r\n            onClose={toggleDrawer('right', false)}\r\n            onOpen={toggleDrawer('right', true)}\r\n          >\r\n            <List>\r\n              <ListItem>タイトル一覧</ListItem>\r\n              <Divider />\r\n              {MangaList}\r\n            </List>\r\n            </SwipeableDrawer>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Toolbar />\r\n    </div>\r\n  );\r\n}","import React,{Component} from 'react';\r\n//import { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport koma4 from './data/koma4.json';\r\n\r\nexport default class ViewerContents extends Component {\r\n  state = {\r\n    showlist: [0],\r\n    current: 1\r\n  }\r\n  handleAddShowList = () =>{\r\n    this.setState({\r\n      showlist: this.state.showlist.concat(this.state.current),\r\n      current: this.state.current + 1\r\n    })\r\n    console.log(this.state.current)\r\n    console.log(this.state.showlist)\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.showlist.map((index) => {\r\n          return koma4[index].ImagesUrl.map(url =>{\r\n            return <img src={url} alt={koma4[index].Title} style={{width:'100%'}}></img>\r\n          })\r\n        })}\r\n        <div style={{textAlign:'center'}}>\r\n          <input type=\"button\" onClick={this.handleAddShowList} value=\"続きを表示\"/>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport LikedGuys from './data/Liked.json';\r\nimport { green, pink } from '@material-ui/core/colors';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    weLoveText:{\r\n      fontSize: \"150%\",\r\n      color: \"rgb(255, 59, 92)\",\r\n      fontWeight: \"bold\",\r\n    },\r\n    guysIcon: {\r\n      borderRadius: 50,\r\n    },\r\n  }),\r\n);\r\n\r\nexport default function WeLoveMichikusaya(){\r\n  const classes = useStyles();\r\n  return (\r\n    <div id=\"WeLove\">\r\n      <span className={classes.weLoveText}>WE♡道草屋</span><br />\r\n      <div>\r\n        {LikedGuys.map(guys => {\r\n          return <img className={classes.guysIcon} src={guys.icon} alt={guys.name} title={guys.name}/>\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { green, pink } from '@material-ui/core/colors';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport { Typography } from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport Cards from '@material-ui/core/Card';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    heading: {\r\n      fontSize: theme.typography.pxToRem(15),\r\n      flexBasis: '33.33%',\r\n      flexShrink: 1,\r\n    },\r\n    secondaryHeading: {\r\n      fontSize: theme.typography.pxToRem(15),\r\n      color: theme.palette.text.secondary,\r\n    },\r\n  }),\r\n);\r\n\r\nexport default function Donate() {\r\n  const classes = useStyles();\r\n  const [ancor, setAncor] = React.useState(false);\r\n  \r\n  const handleSetAncor = ()=>{\r\n    setAncor(!ancor)\r\n  }\r\n  return (\r\n    <div id=\"Donate\" className={classes.root}>\r\n      <Cards>\r\n        <Button\r\n          onClick={handleSetAncor}\r\n        >\r\n          支援について\r\n        </Button>\r\n        <Collapse in={ancor}>\r\n          <Cards>\r\n            ご支援をお待ちしています。\r\n          </Cards>\r\n        </Collapse>\r\n      </Cards>\r\n  \r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { green, pink } from '@material-ui/core/colors';\r\nimport WeLoveMichikusaya from './WeLoveMichikusaya'\r\nimport Donate from './Donate';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n      marginBottom: 10,\r\n    },\r\n    weLoveText:{\r\n      fontSize: \"150%\",\r\n      color: \"rgb(255, 59, 92)\",\r\n      fontWeight: \"bold\",\r\n    },\r\n    guysIcon: {\r\n      borderRadius: 50,\r\n    },\r\n  }),\r\n);\r\n\r\n\r\nexport default function Footer() {\r\n  const title = \"みちくさびゅあー\"\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Container fixed>\r\n        <WeLoveMichikusaya></WeLoveMichikusaya>\r\n        <Donate></Donate>\r\n        みちくさびゅあーは道草屋の著作者である桃鳥様から許諾を得てiranikaが提供・公開しています。<br />\r\n        みちくさびゅーあー ©2019 iranika(@happy_packet)\r\n      </Container>\r\n    </div>\r\n  );\r\n}","import React,{Component} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport AppBar from './AppBar'\r\nimport Viewer from './Viewer'\r\nimport ViewerContents from './Viewer';\r\nimport Footer from './Footer';\r\n\r\ninterface ViewerContext {\r\n  lang: string,\r\n}\r\nconst defaultAppContext: ViewerContext = {\r\n  lang: \"ja\",\r\n}\r\nexport const AppContext = React.createContext({});\r\n//TODO: context情報をlocalstorageに記憶させる\r\n//const appKey = \"MichikusaViewer\"\r\n//const appData = localStorage.getItem(appKey)\r\n//const initialState = appData ? JSON.parse(appData) : defaultAppContext\r\n\r\nexport default class App extends React.Component {\r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n        <AppContext.Provider value={defaultAppContext}>\r\n          <AppBar />\r\n          <Viewer />\r\n          <Footer />\r\n        </AppContext.Provider>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/*\r\nexport default class App extends React.Component {\r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n        <AppContext.Provider value={this.lang}>\r\n          <AppBar />\r\n          <Viewer />\r\n        </AppContext.Provider>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport AppBar from './AppBar'\r\nimport koma4 from './data/koma4.json'\r\nimport Viewer from './Viewer'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n//ReactDOM.render(<Viewer />, document.getElementById('root'));\r\n//ReactDOM.render(<AppBar />, document.getElementById('appbar'));\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}