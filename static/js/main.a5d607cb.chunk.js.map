{"version":3,"sources":["AppBar.tsx","Viewer.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","spacing","title","ViewerContents","state","showlist","current","handleAddShowList","setState","concat","console","log","this","map","index","koma4","ImagesUrl","url","src","alt","Title","type","onClick","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","classes","React","useState","anchorEl","setAnchorEl","open","className","AppBar","position","Toolbar","Typography","variant","IconButton","edge","color","aria-label","event","currentTarget","Menu","id","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","item","MenuItem","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ypzCAYMA,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaL,EAAMM,QAAQ,IAE7BC,MAAO,CACLJ,SAAU,Q,4CCjBKK,E,2MACnBC,MAAQ,CACNC,SAAU,CAAC,GACXC,QAAS,G,EAEXC,kBAAoB,WAClB,EAAKC,SAAS,CACZH,SAAU,EAAKD,MAAMC,SAASI,OAAO,EAAKL,MAAME,SAChDA,QAAS,EAAKF,MAAME,QAAU,IAEhCI,QAAQC,IAAI,EAAKP,MAAME,SACvBI,QAAQC,IAAI,EAAKP,MAAMC,W,wEAGvB,OACE,6BACGO,KAAKR,MAAMC,SAASQ,KAAI,SAACC,GACxB,OAAOC,EAAMD,GAAOE,UAAUH,KAAI,SAAAI,GAChC,OAAO,yBAAKC,IAAKD,EAAKE,IAAKJ,EAAMD,GAAOM,cAG5C,2BAAOC,KAAK,SAASC,QAASV,KAAKL,kBAAmBgB,MAAM,wC,GArBxBC,aCQxBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,SACpDH,IAASC,OAAO,mBHeD,WACb,IAAMG,EAAUzC,IADqB,EAEL0C,IAAMC,SAA6B,MAF9B,mBAE9BC,EAF8B,KAEpBC,EAFoB,KAG/BC,EAAOd,QAAQY,GASrB,OACE,yBAAKG,UAAWN,EAAQrC,MACtB,kBAAC4C,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKL,UAAWN,EAAQhC,OAZtC,oDAeN,kBAAC4C,EAAA,EAAD,CAAYC,KAAK,QAAQP,UAAWN,EAAQnC,WAAYiD,MAAM,UAAUC,aAAW,OAAO3B,QAd/E,SAAC4B,GAClBZ,EAAYY,EAAMC,iBAcV,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAMC,GAAG,cACPhB,SAAUA,EACViB,aAAc,CACZC,SAAU,MACVC,WAAY,SAEdC,aAAW,EACXC,gBAAiB,CACfH,SAAU,MACVC,WAAY,SAEdjB,KAAMA,EACNoB,QAzBU,WAClBrB,EAAY,QA0BHvB,EAAMF,KAAI,SAAC+C,EAAM9C,GAChB,OAAO,kBAAC+C,EAAA,EAAD,KAAW/C,EAAM,EAAjB,IAAqB8C,EAAKxC,gBGpD/B,MAAYY,SAASC,eAAe,WDgI9C,kBAAmB6B,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a5d607cb.chunk.js","sourcesContent":["import React from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport koma4 from './data/koma4.json';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n  }),\r\n);\r\n\r\nexport default function ButtonAppBar() {\r\n  const classes = useStyles();\r\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n  const open = Boolean(anchorEl);\r\n  const title = \"みちくさびゅあー\"\r\n  const handleMenu = (event: React.MouseEvent<HTMLElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            {title}\r\n          </Typography>\r\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={handleMenu}>\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Menu　id=\"menu-appbar\"\r\n            anchorEl={anchorEl}\r\n            anchorOrigin={{\r\n              vertical: 'top',\r\n              horizontal: 'right',\r\n            }}\r\n            keepMounted\r\n            transformOrigin={{\r\n              vertical: 'top',\r\n              horizontal: 'right',\r\n            }}\r\n            open={open}\r\n            onClose={handleClose}>\r\n            \r\n            {koma4.map((item, index) => {\r\n              return <MenuItem>{index+1}.{item.Title}</MenuItem>;         \r\n            })}\r\n          </Menu>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}","import React,{Component} from 'react';\r\n//import { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport koma4 from './data/koma4.json';\r\n\r\nexport default class ViewerContents extends Component {\r\n  state = {\r\n    showlist: [0],\r\n    current: 1\r\n  }\r\n  handleAddShowList = () =>{\r\n    this.setState({\r\n      showlist: this.state.showlist.concat(this.state.current),\r\n      current: this.state.current + 1\r\n    })\r\n    console.log(this.state.current)\r\n    console.log(this.state.showlist)\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.showlist.map((index) => {\r\n          return koma4[index].ImagesUrl.map(url =>{\r\n            return <img src={url} alt={koma4[index].Title}></img>\r\n          })\r\n        })}\r\n        <input type=\"button\" onClick={this.handleAddShowList} value=\"続きを表示\"/>\r\n      </div>\r\n    );\r\n  }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport AppBar from './AppBar'\nimport koma4 from './data/koma4.json'\nimport Viewer from './Viewer'\nimport * as serviceWorker from './serviceWorker';\n\n//ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<Viewer />, document.getElementById('root'));\nReactDOM.render(<AppBar />, document.getElementById('appbar'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}